{
  "name": "giuseppe",
  "tagline": "A controller routing system for expressJS with TypeScript decorators and annotations",
  "body": "![giuseppe](https://cloud.githubusercontent.com/assets/292951/14691860/f363e562-0753-11e6-89df-aab95645084f.png)\r\n\r\ngiuseppe [Italian: dʒuˈzɛppe] is a controller routing system for [Express](http://expressjs.com/) using [TypeScript](https://www.typescriptlang.org/) decorators and annotations named after the great Italian componist Giuseppe Verdi. Like Verdi, it composes things, but not a great piece of musical history! We compose routes for you. giuseppe is dedicated to\r\n[Express](http://expressjs.com/) and depends on it. We were tired of writing all the route registrations by ourselves.\r\n\r\n##### A bunch of badges\r\n\r\n[![Build Status](https://travis-ci.org/smartive/giuseppe.svg)](https://travis-ci.org/smartive/giuseppe) [![npm](https://img.shields.io/npm/v/giuseppe.svg?maxAge=3600)](https://www.npmjs.com/package/giuseppe) [![Coverage status](https://img.shields.io/coveralls/smartive/giuseppe.svg?maxAge=3600)](https://coveralls.io/github/smartive/giuseppe)\r\n\r\n## Table of contents\r\n\r\n- [Docs](#docs)\r\n- [Installation](#installation)\r\n- [Basic usage](#basic-usage)\r\n- [Testing](#testing)\r\n- [Contribute](#contribute)\r\n- [Changelog](#changelog)\r\n- [Licence](#licence)\r\n\r\n## Docs\r\n\r\nThis readme will give a short overview over the usable features. For more detailed information,\r\nplease find a more detailed documentation in the `docs/` folder.\r\n\r\n- [Registration of controllers](docs/Registration.md)\r\n- [Controllers](docs/Controllers.md)\r\n- [Routes](docs/Routes.md)\r\n- [Middleware](docs/Middleware.md)\r\n- [Parameters](docs/Parameters.md)\r\n- [Validators](docs/Validators.md)\r\n- [Error handling](docs/ErrorHandling.md)\r\n\r\n## Installation\r\n\r\nTo install this package, simply run\r\n\r\n[![NPM](https://nodei.co/npm/giuseppe.png?downloads=true&stars=true)](https://nodei.co/npm/giuseppe/)\r\n\r\nIf not all `typings` are installed for giuseppe\r\nyou need to manually install the typings for this package.\r\n\r\nThe dependend typings are:\r\n- `es6-shim`\r\n- `express`\r\n- `express-serve-static-core`\r\n- `http-status`\r\n- `mime`\r\n- `node`\r\n- `serve-static`\r\n\r\nThis package installs the transpiled `*.js` files instead of `*.ts` files, since the compiler tries\r\nto compile them everytime. The declaration files with the JSDocs are provided aswell so your \r\nautocomplete does work as it should.\r\n\r\n## Basic usage\r\n\r\nTo start with a very simple \"ping-pong\" example, just use the following lines of code (app.ts):\r\n\r\n```typescript\r\nimport {Controller, Get, registerControllers} from 'giuseppe';\r\nimport express = require('express');\r\n\r\n@Controller()\r\nclass PingPongController {\r\n    \r\n    @Get('ping')\r\n    public ping(): any {\r\n        return {ping: 'pong'};\r\n    }\r\n    \r\n}\r\n\r\nlet app = express();\r\n\r\napp.use(registerControllers('/api'));\r\n\r\napp.listen(8080, () => {\r\n    console.log('Up and running on port 8080');\r\n});\r\n```\r\n\r\nIf you run this basic example, the pingpong controller will be registered to the route\r\n`/api/ping` since no controller route prefix is given.\r\n\r\nNow you clearly do not want to code all your controllers in your `app.ts`. You can decorate any\r\nclass you want, the only condition is, that the class is loaded before the `registerControllers`\r\nfunction is called.\r\n\r\n`controllers.ts`:\r\n\r\n```typescript\r\nimport {Controller, Get, Query} from 'giuseppe';\r\n\r\n@Controller()\r\nexport class PingPongController {\r\n    \r\n    @Get('ping')\r\n    public ping(): any {\r\n        return {ping: 'pong'};\r\n    }\r\n    \r\n}\r\n\r\n@Controller('echo')\r\nexport class EchoController {\r\n    \r\n    @Get()\r\n    public ping(@Query('data') data: string): string {\r\n        return 'you gave me: ' + data;\r\n    }\r\n    \r\n}\r\n```\r\n\r\n`app.ts`:\r\n\r\n```typescript\r\nimport './controllers';\r\nimport {registerControllers} from 'giuseppe';\r\nimport express = require('express');\r\n\r\nlet app = express();\r\n\r\napp.use(registerControllers('/api'));\r\n\r\napp.listen(8080, () => {\r\n    console.log('Up and running on port 8080');\r\n});\r\n```\r\n\r\nIn the example above, the two controllers are registered in expressJS with the routes\r\n`/api/ping` and `/api/echo`. The echo route does listen to a `Query` parameter with the\r\nname `data`. If it's not provided, undefined is injected.\r\n\r\nThis was a short example of the possiblities of giuseppe. Please find a more detailed version\r\nof the documentation in the [links at the start](#docs) and/or the `docs/` folder.\r\n\r\n#### Examples\r\n\r\nThere are many examples located in the [examples](examples) folder!\r\nPlease have a look there for various use cases :smile:.\r\n\r\n## Testing\r\n\r\nIf you checked out this repository (yay!) and installed all the dependencies, you\r\ncan run the ninety-ish tests with\r\n\r\n```bash\r\nnpm test\r\n```\r\n\r\nIf you get any errors, maybe you didn't install the dependencies. There is a `npm run bootstrap`\r\ncommand that will install them for you.\r\n\r\n## Contribute\r\n\r\nWe're happy if you have any contributions! Every participation counts. Feel free to\r\nopen pull requests, issues or use any other form of contribution. Maybe we'll\r\nset up a `CONTRIBUTING.md` file in the future. soon(tm) :smile:.\r\n\r\n[Full list of contributors](https://github.com/smartive/giuseppe/graphs/contributors)\r\n\r\n## Changelog\r\n\r\nThe changelog is based on [keep a changelog](http://keepachangelog.com) and is located here:\r\n\r\n[Changelog](CHANGELOG.md)\r\n\r\n## Licence\r\n\r\nThis software is licenced under the [MIT](LICENSE) licence.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}